import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Link from "next/link";
import { app, database } from "../firebaseConfig";
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from "firebase/firestore";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";

export default function Home() {
  const [name, setName] = useState("");
  const [ID, setID] = useState(null);
  const [age, setAge] = useState("");
  const [isUpdate, setIsUpdate] = useState(false);
  const [firedata, setFireData] = useState([]);
  const databaseRef = collection(database, "CRUD Data");
  const router = useRouter();
  useEffect(() => {
    const token = sessionStorage.getItem("Token");
    if (token) {
      getData();
    }
    if (!token) {
      router.push("/register");
    }
  }, []);
  const addData = () => {
    addDoc(databaseRef, {
      name: name,
      age: Number(age),
    })
      .then(() => {
        alert("Data Masuk");
        getData();
        setName("");
        setAge(null);
      })
      .catch((err) => {
        console.error(err);
      });
  };

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFireData(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const getID = (id, name, age) => {
    setID(id);
    setName(name);
    setAge(age);
    setIsUpdate(true);
  };
  const updateFields = () => {
    let fieldToEdit = doc(database, "CRUD Data", ID);
    updateDoc(fieldToEdit, {
      name: name,

      age: Number(age),
    })
      .then(() => {
        alert("data Updated");
        getData();
        setName("");
        setAge(null);
        setIsUpdate(false);
      })
      .catch((err) => {
        console.log(err);
      });
  };
  const deleteDocument = (id) => {
    let fieldToEdit = doc(database, "CRUD Data", id);
    deleteDoc(fieldToEdit)
      .then(() => {
        alert("terhapus");
        getData();
      })
      .catch(() => {
        alert("gabisa");
      });
  };
  const logout = () => {
    sessionStorage.removeItem("Token");
    router.push("/register");
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <button onClick={logout} className={styles.btn}>
            Log Out
          </button>
        </div>
        <h1 className={styles.title}>Home</h1>
        <input placeholder="Name" type="text" value={name} onChange={(event) => setName(event.target.value)} />
        <input placeholder="Age" type="number" value={age} onChange={(event) => setAge(event.target.value)} />
        {isUpdate ? (
          <button className={styles.card} onClick={updateFields}>
            Update
          </button>
        ) : (
          <button className={styles.card} onClick={addData}>
            ADD
          </button>
        )}
        <div>
          {firedata.map((data) => {
            return (
              <div className={styles.grid}>
                <h3>Name : {data.name}</h3>
                <p>Age: {data.age}</p>
                <button onClick={() => getID(data.id, data.name, data.age)} className={styles.card}>
                  Update
                </button>
                <button onClick={() => deleteDocument(data.id)} className={styles.card}>
                  Delete
                </button>
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
}
